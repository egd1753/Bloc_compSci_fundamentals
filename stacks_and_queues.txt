# Exercises

> What is the main difference between a stack and a queue?

A: A stack uses the LIFO priority, while a queue uses the FIFO priority.

> What are the similarities between stacks and queues?

A: They are both data structures, and enable engineers to rank tasks, order priorities and operations, and support system functions.

> Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

A: For UNDO I would use a stack, because a stack uses the LIFO priority. This is important because when we click "UNDO", we want to go back one step, and Last In First Out means that data for the previous step is only one step away. For REDO we could use a second stack that keeps all the commands that have just been UNDONE.  

# Programming Questions

> Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

A: 
function reverseString(stringInput) {
	
	var stack = [];
	
	for (let i = 0; i < stringInput.length; i++) {
		
		stack.push(stringInput[i]);
    
	}
	
	var reversed = "";
	
	while (stack.length > 0) {
		
		reversed += stack.pop()
    
	}
	
	return reversed;

}

> Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

A: 
class Queue {
	constructor() {
	   this.list = [];
	}
	
	enqueue(element) {
	   this.list.push(element);
	}

	dequeue() {
	   var temp = this.list.shift();
	   return temp;
	}

	pop() {
	   var temp;
	   for (let i = 0; i < (this.list.length - 1); i++) {
		temp = dequeue();
		enqueue(temp);
	   }
	   return this.dequeue();	
	}
}

 